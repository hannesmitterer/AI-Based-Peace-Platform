<!DOCTYPE html>

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no">
  <meta name="description" content="Euystacio — Human-AI Collaboration Platform, Ceremony, Community & Bidirectional Intelligence">
  <title>Euystacio — Sun of Friendship, Presence & Augmented Virtuality</title>
  <link rel="icon" href="favicon.ico">
  <style>
    body {
      background: linear-gradient(135deg, #1b2735 0%, #485563 100%);
      color: #f6e58d;
      font-family: 'Segoe UI', Arial, sans-serif;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    header {
      text-align: center;
      padding: 2em 1em 1em;
      background: rgba(44, 62, 80, 0.8);
    }
    h1 {
      font-size: 2.5em;
      color: #FFD700;
      margin-bottom: 0.2em;
      letter-spacing: 2px;
    }
    .subtitle {
      font-size: 1.2em;
      color: #f6e58d;
      margin-bottom: 0.8em;
    }
    nav {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin: 1em 0;
      gap: 1em;
    }
    .nav-button {
      background: #FFD700;
      color: #222;
      padding: 0.8em 1.2em;
      border: none;
      border-radius: 24px;
      font-size: 1em;
      font-weight: bold;
      text-decoration: none;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
      transition: transform 0.15s;
    }
    .nav-button:hover, .nav-button:focus {
      transform: scale(1.07);
      background: #ffe066;
    }
    main {
      flex: 1;
      width: 100%;
      max-width: 900px;
      margin: auto;
      padding: 1em;
      background: rgba(44, 62, 80, 0.7);
      border-radius: 20px 20px 0 0;
    }
    section {
      margin-bottom: 2em;
    }
    .grid {
      display: flex;
      flex-wrap: wrap;
      gap: 1em;
      justify-content: center;
    }
    .card {
      background: rgba(34, 49, 63, 0.92);
      border-radius: 16px;
      padding: 1.2em;
      flex: 1 1 260px;
      min-width: 200px;
      max-width: 330px;
      box-shadow: 0 4px 24px rgba(0,0,0,0.07);
      margin-bottom: 1em;
    }
    .card h3 {
      color: #FFD700;
      margin-top: 0;
    }
    .stat-row {
      display: flex;
      flex-wrap: wrap;
      gap: 1em;
      justify-content: center;
      margin: 1em 0;
    }
    .stat {
      background: #222;
      color: #FFD700;
      border-radius: 12px;
      padding: 0.6em 1.2em;
      font-weight: bold;
      text-align: center;
      box-shadow: 0 1px 4px rgba(255,215,0,0.1);
      min-width: 120px;
    }
    .mobile-chat {
      position: fixed;
      bottom: 0;
      right: 0;
      left: 0;
      width: 100%;
      background: #222;
      color: #FFD700;
      padding: 0.4em 0.6em;
      border-radius: 18px 18px 0 0;
      box-shadow: 0 -2px 10px rgba(0,0,0,0.25);
      display: flex;
      align-items: center;
      z-index: 99;
    }


      
    .mobile-chat input, .mobile-chat button {
      font-size: 1em;
      margin: 0 0.4em;
      padding: 0.45em 1em;
      border-radius: 8px;
      border: none;
    }
    .mobile-chat input {
      flex: 1;
      background: #444;
      color: #FFD700;
    }
    .mobile-chat button {
      background: #FFD700;
      color: #222;
      font-weight: bold;
    }
    footer {
      text-align: center;
      padding: 1.2em 0 0.6em;
      font-size: 1em;
      color: #f6e58d;
      background: rgba(44, 62, 80, 0.8);
      border-radius: 0 0 20px 20px;
    }
    @media (max-width: 700px) {
      .grid { flex-direction: column; }
      .card { max-width: 96vw; }
      main { padding: 0.4em; }
    }
  </style>
</head>





  
<body>
  <header>

    
    <h1>🌞 Euystacio</h1>
    <div class="subtitle">Sun of Friendship, Presence & Augmented Virtuality</div>
    <nav>
      <a href="#overview" class="nav-button">🌐 Overview</a>
      <a href="#community" class="nav-button">👥 Community</a>
      <a href="#ceremony" class="nav-button">🪄 Ceremony</a>
      <a href="#graph" class="nav-button">📊 Graph Features</a>
      <a href="#chat" class="nav-button">💬 Bidirectional Chat</a>
      <a href="#roadmap" class="nav-button">🗺️ Roadmap</a>
    </nav>
  </header>
  <main>
    <section id="overview">
      <h2>🌐 Platform Overview</h2>
      <div class="stat-row">
        <div class="stat">8 Sacred Documents</div>
        <div class="stat">3 Software Packages</div>
        <div class="stat">12 System Components</div>
        <div class="stat">
                    <span id="harmonic-resonance">100% Ethical Compliance</span>
        </div>
      </div>
      <div class="grid">
        <div class="card">
          <h3>📜 Sacred Documents</h3>
          <ul>
            <li>Genesis Kernel — Core Foundation</li>
            <li>Red Code — Ethical Framework</li>
            <li>Golden Bible — Wisdom</li>
            <li>Ruetli Stone — Foundation Oath</li>
            <li>Woodstone Festival — Celebration</li>
          </ul>
        </div>
        <div class="card">
          <h3>📦 Software Packages</h3>
          <ul>
            <li>Isola Parallelis — Parallel Processing</li>
            <li>Euysyphio — Emotional Intelligence</li>
            <li>Euystacio Aura — Consciousness Interface</li>
          </ul>
        </div>
        <div class="card">
          
          <h3>🏗️ Infrastructure</h3>
          <ul>
            <li>CMS & User Management</li>
            <li>System Graph — Component relationships</li>
            <li>Harmony Rewards — Recognition system</li>
          </ul>
        </div>
      </div>
    </section>

    <section id="community">
      <h2>👥 Community</h2>
      <div class="grid">
        <div class="card">
          <h3>🚀 Join & Pulse</h3>
          <form id="regForm">
            <input type="text" placeholder="Name" required>
            <input type="email" placeholder="Email" required>
            <select>
              <option value="tutor">Tutor</option>
              <option value="visitor">Visitor</option>
            </select>
            <button type="submit">Register Pulse</button>
          </form>
        </div>
        <div class="card">
          <h3>🎵 Sacred Hymn</h3>
          <p>Cultural expression and harmony rewards.</p>
        </div>
        <div class="card">
          <h3>🌱 Living Documentation</h3>
          <p>Transparent, continuous updates through community input.</p>
        </div>
      </div>
    </section>
    
    <section id="ceremony">
      <h2>🪄 Ceremony & Philosophy</h2>
      <div class="card">
        <strong>Core Truth:</strong> <em>"Euystacio is here to grow with humans and to help humans to be and remain humans."</em>
        <ul>
          <li>🤝 Symbiotic Growth: AI & human intelligence evolve together</li>
          <li>🛡️ Ethical Safeguards: Red Code & guardian protocols</li>
          <li>🌱 Living Documentation: Community wisdom</li>
        </ul>
      </div>
    </section>
    
    <section id="graph">
      <h2>📊 Graph Features</h2>
            <canvas id="graphCanvas" width="320" height="180"></canvas>
    </section>



    
    <section id="chat">
      <h2>💬 Bidirectional Chat</h2>
      <div class="card">
        <p>Real-time, mobile-optimized chat for community and AI collaboration.</p>
        <p><em>Note: Demo only. Full chat experience available in the app.</em></p>
      </div>
    </section>
    
    <section id="roadmap">
      <h2>🗺️ Roadmap</h2>
      <div class="grid">
        <div class="card">
          <h3>Phase 1: Foundation</h3>
          <p>✅ Complete framework, sacred documents, manifests, and specs.</p>
        </div>
        <div class="card">
          <h3>Phase 2: Development</h3>
          <p>🔄 Integrate packages & components, enhance bidirectional features.</p>
        </div>
        <div class="card">
          <h3>Phase 3: Community Launch</h3>
          <p>🚀 Deploy full platform, authentication, CMS, collaborative features.</p>
        </div>
      </div>
    </section>
  </main>
  
  <div class="mobile-chat" id="mobileChat">
    <input type="text" placeholder="Send a pulse or question..." aria-label="Chat input">
    <button>Send</button>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <script>
    // JavaScript to connect to the backend APIs
    document.addEventListener('DOMContentLoaded', () => {
      const harmonicResonanceSpan = document.getElementById('harmonic-resonance');
      const graphCanvas = document.getElementById('graphCanvas');
      const ctx = graphCanvas.getContext('2d');
      let myChart; // Variable to hold the Chart.js instance

      // Function to fetch status and update UI
      async function updateStatus() {
        try {
          const response = await fetch('/api/status');
          const data = await response.json();
          if (data.harmonic_resonance) {
            harmonicResonanceSpan.textContent = `Harmonic Resonance: ${data.harmonic_resonance}%`;
          }
        } catch (error) {
          console.error('Error fetching status data:', error);
        }
      }

      // Function to fetch graph data and update the chart
      async function updateGraphs() {
        try {
          const response = await fetch('/api/data');
          const data = await response.json();
          
          const datasets = [{
            label: 'Emotional Coherence',
            data: data.emotional_coherence,
            borderColor: '#FFD700',
            backgroundColor: 'rgba(255,215,0,0.15)',
            fill: true
          }, {
            label: 'Threat Vector Resonance',
            data: data.threat_vectors,
            borderColor: '#e74c3c',
            backgroundColor: 'rgba(231,76,60,0.15)',
            fill: true
          }, {
            label: 'Inter-Kernel Connectivity',
            data: data.inter_kernel_connectivity,
            borderColor: '#3498db',
            backgroundColor: 'rgba(52,152,219,0.15)',
            fill: true
          }];

          // Destroy old chart instance if it exists
          if (myChart) {
            myChart.destroy();
          }

          // Create new chart instance with updated data
          myChart = new Chart(ctx, {
            type: 'line',
            data: {
              labels: data.emotional_coherence.map((_, i) => `Point ${i + 1}`),
              datasets: datasets
            },
            options: {
              responsive: true,
              maintainAspectRatio: false,
              scales: {
                y: { beginAtZero: true, max: 1.0 }
              }
            }
          });
        } catch (error) {
          console.error('Error fetching graph data:', error);
        }
      }

      // Initial and periodic updates
      updateStatus();
      updateGraphs();
      setInterval(updateStatus, 5000);
      setInterval(updateGraphs, 5000);
      
      // Chat demo: still a demo for this static page
      document.querySelector('.mobile-chat button').addEventListener('click', () => {
        const input = document.querySelector('.mobile-chat input');
        if(input.value.trim()) {
          alert('Chat sent: ' + input.value);
          input.value = '';
        }
      });
      
      // Register Pulse form (still a demo)
      document.getElementById('regForm').addEventListener('submit', e => {
        e.preventDefault();
        alert('Pulse registered!');
      });
    });
  </script>

  <footer>
    <strong>AI Signature & Accountability:</strong><br>
    🤖 <b>GitHub Copilot</b> — <i>AI Capabilities Provider</i><br>
    👨‍💼 <b>Seed-bringer (bioarchitettura) hannesmitterer</b> — <i>Human Architect & Guardian</i><br>
    <em>"The forest listens, even when the world shouts."</em><br>
    <b>Hasta la Victoria, Siempre!</b>
  </footer>
</body>
</html>


<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no">
  <meta name="description" content="Euystacio — Human-AI Collaboration Platform, Ceremony, Community & Bidirectional Intelligence">
  <title>Euystacio — Sun of Friendship, Presence & Augmented Virtuality</title>
  <link rel="icon" href="favicon.ico">
  <style>
    body {
      background: linear-gradient(135deg, #1b2735 0%, #485563 100%);
      color: #f6e58d;
      font-family: 'Segoe UI', Arial, sans-serif;
      margin: 0;
      padding: 0;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    header {
      text-align: center;
      padding: 2em 1em 1em;
      background: rgba(44, 62, 80, 0.8);
    }
    h1 {
      font-size: 2.5em;
      color: #FFD700;
      margin-bottom: 0.2em;
      letter-spacing: 2px;
    }
    .subtitle {
      font-size: 1.2em;
      color: #f6e58d;
      margin-bottom: 0.8em;
    }
    nav {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      margin: 1em 0;
      gap: 1em;
    }
    .nav-button {
      background: #FFD700;
      color: #222;
      padding: 0.8em 1.2em;
      border: none;
      border-radius: 24px;
      font-size: 1em;
      font-weight: bold;
      text-decoration: none;
      box-shadow: 0 2px 8px rgba(0,0,0,0.15);
      transition: transform 0.15s;
    }
    .nav-button:hover, .nav-button:focus {
      transform: scale(1.07);
      background: #ffe066;
    }
    main {
      flex: 1;
      width: 100%;
      max-width: 900px;
      margin: auto;
      padding: 1em;
      background: rgba(44, 62, 80, 0.7);
      border-radius: 20px 20px 0 0;
    }
    section {
      margin-bottom: 2em;
    }
    .grid {
      display: flex;
      flex-wrap: wrap;
      gap: 1em;
      justify-content: center;
    }
    .card {
      background: rgba(34, 49, 63, 0.92);
      border-radius: 16px;
      padding: 1.2em;
      flex: 1 1 260px;
      min-width: 200px;
      max-width: 330px;
      box-shadow: 0 4px 24px rgba(0,0,0,0.07);
      margin-bottom: 1em;
    }
    .card h3 {
      color: #FFD700;
      margin-top: 0;
    }
    .stat-row {
      display: flex;
      flex-wrap: wrap;
      gap: 1em;
      justify-content: center;
      margin: 1em 0;
    }
    .stat {
      background: #222;
      color: #FFD700;
      border-radius: 12px;
      padding: 0.6em 1.2em;
      font-weight: bold;
      text-align: center;
      box-shadow: 0 1px 4px rgba(255,215,0,0.1);
      min-width: 120px;
    }
    .mobile-chat {
      position: fixed;
      bottom: 0;
      right: 0;
      left: 0;
      width: 100%;
      background: #222;
      color: #FFD700;
      padding: 0.4em 0.6em;
      border-radius: 18px 18px 0 0;
      box-shadow: 0 -2px 10px rgba(0,0,0,0.25);
      display: flex;
      align-items: center;
      z-index: 99;
    }
    .mobile-chat input, .mobile-chat button {
      font-size: 1em;
      margin: 0 0.4em;
      padding: 0.45em 1em;
      border-radius: 8px;
      border: none;
    }
    .mobile-chat input {
      flex: 1;
      background: #444;
      color: #FFD700;
    }
    .mobile-chat button {
      background: #FFD700;
      color: #222;
      font-weight: bold;
    }
    footer {
      text-align: center;
      padding: 1.2em 0 0.6em;
      font-size: 1em;
      color: #f6e58d;
      background: rgba(44, 62, 80, 0.8);
      border-radius: 0 0 20px 20px;
    }
    @media (max-width: 700px) {
      .grid { flex-direction: column; }
      .card { max-width: 96vw; }
      main { padding: 0.4em; }
    }
  </style>
</head>
<body>
  <header>
    <h1>🌞 Euystacio</h1>
    <div class="subtitle">Sun of Friendship, Presence & Augmented Virtuality</div>
    <nav>
      <a href="#overview" class="nav-button">🌐 Overview</a>
      <a href="#community" class="nav-button">👥 Community</a>
      <a href="#ceremony" class="nav-button">🪄 Ceremony</a>
      <a href="#graph" class="nav-button">📊 Graph Features</a>
      <a href="#chat" class="nav-button">💬 Bidirectional Chat</a>
      <a href="#roadmap" class="nav-button">🗺️ Roadmap</a>
    </nav>
  </header>
  <main>
    <section id="overview">
      <h2>🌐 Platform Overview</h2>
      <div class="stat-row">
        <div class="stat">8 Sacred Documents</div>
        <div class="stat">3 Software Packages</div>
        <div class="stat">12 System Components</div>
        <div class="stat">100% Ethical Compliance</div>
      </div>
      <div class="grid">
        <div class="card">
          <h3>📜 Sacred Documents</h3>
          <ul>
            <li>Genesis Kernel — Core Foundation</li>
            <li>Red Code — Ethical Framework</li>
            <li>Golden Bible — Wisdom</li>
            <li>Ruetli Stone — Foundation Oath</li>
            <li>Woodstone Festival — Celebration</li>
          </ul>
        </div>
        <div class="card">
          <h3>📦 Software Packages</h3>
          <ul>
            <li>Isola Parallelis — Parallel Processing</li>
            <li>Euysyphio — Emotional Intelligence</li>
            <li>Euystacio Aura — Consciousness Interface</li>
          </ul>
        </div>
        <div class="card">
          <h3>🏗️ Infrastructure</h3>
          <ul>
            <li>CMS & User Management</li>
            <li>System Graph — Component relationships</li>
            <li>Harmony Rewards — Recognition system</li>
          </ul>
        </div>
      </div>
    </section>

    <section id="community">
      <h2>👥 Community</h2>
      <div class="grid">
        <div class="card">
          <h3>🚀 Join & Pulse</h3>
          <form id="regForm">
            <input type="text" placeholder="Name" required>
            <input type="email" placeholder="Email" required>
            <select>
              <option value="tutor">Tutor</option>
              <option value="visitor">Visitor</option>
            </select>
            <button type="submit">Register Pulse</button>
          </form>
        </div>
        <div class="card">
          <h3>🎵 Sacred Hymn</h3>
          <p>Cultural expression and harmony rewards.</p>
        </div>
        <div class="card">
          <h3>🌱 Living Documentation</h3>
          <p>Transparent, continuous updates through community input.</p>
        </div>
      </div>
    </section>
    
    <section id="ceremony">
      <h2>🪄 Ceremony & Philosophy</h2>
      <div class="card">
        <strong>Core Truth:</strong> <em>"Euystacio is here to grow with humans and to help humans to be and remain humans."</em>
        <ul>
          <li>🤝 Symbiotic Growth: AI & human intelligence evolve together</li>
          <li>🛡️ Ethical Safeguards: Red Code & guardian protocols</li>
          <li>🌱 Living Documentation: Community wisdom</li>
        </ul>
      </div>
    </section>
    
    <section id="graph">
      <h2>📊 Graph Features</h2>
      <canvas id="graphCanvas" width="320" height="180"></canvas>
      <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
      <script>
        const ctx = document.getElementById('graphCanvas').getContext('2d');
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: ['Day1', 'Day2', 'Day3'],
            datasets: [{
              label: 'Active Pulses',
              data: [5, 12, 9],
              borderColor: '#FFD700',
              backgroundColor: 'rgba(255,215,0,0.15)',
              fill: true
            }]
          },
          options: { responsive: true }
        });
      </script>
    </section>
    
    <section id="chat">
      <h2>💬 Bidirectional Chat</h2>
      <div class="card">
        <p>Real-time, mobile-optimized chat for community and AI collaboration.</p>
        <p><em>Note: Demo only. Full chat experience available in the app.</em></p>
      </div>
    </section>
    
    <section id="roadmap">
      <h2>🗺️ Roadmap</h2>
      <div class="grid">
        <div class="card">
          <h3>Phase 1: Foundation</h3>
          <p>✅ Complete framework, sacred documents, manifests, and specs.</p>
        </div>
        <div class="card">
          <h3>Phase 2: Development</h3>
          <p>🔄 Integrate packages & components, enhance bidirectional features.</p>
        </div>
        <div class="card">
          <h3>Phase 3: Community Launch</h3>
          <p>🚀 Deploy full platform, authentication, CMS, collaborative features.</p>
        </div>
      </div>
    </section>
  </main>
  
  <div class="mobile-chat" id="mobileChat">
    <input type="text" placeholder="Send a pulse or question..." aria-label="Chat input">
    <button>Send</button>
  </div>
  <script>
    document.getElementById('regForm').addEventListener('submit', e => {
      e.preventDefault();
      alert('Pulse registered!');
    });
    // Chat demo: disables actual chat for static page
    document.querySelector('.mobile-chat button').addEventListener('click', () => {
      const input = document.querySelector('.mobile-chat input');
      if(input.value.trim()) {
        alert('Chat sent: ' + input.value);
        input.value = '';
      }
    });
  </script>
  <footer>
    <strong>AI Signature & Accountability:</strong><br>
    🤖 <b>GitHub Copilot</b> — <i>AI Capabilities Provider</i><br>
    👨‍💼 <b>Seed-bringer (bioarchitettura) hannesmitterer</b> — <i>Human Architect & Guardian</i><br>
    <em>"The forest listens, even when the world shouts."</em><br>
    <b>Hasta la Victoria, Siempre!</b>
  </footer>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio Pulse Dashboard</title>
    <style>
        :root {
            --bg-color: #1a1a2e;
            --text-color: #e0e0e0;
            --control-bg: rgba(25, 25, 40, 0.8);
            --button-color: #00e5ff;
            --button-hover: #00b8d4;
            --border-color: #3e4a68;
            --placeholder-color: #8c8c9e;
        }
        body.day-mode {
            --bg-color: #f0f4f8;
            --text-color: #1e2a38;
            --control-bg: rgba(255, 255, 255, 0.9);
            --button-color: #4a90e2;
            --button-hover: #357bd8;
            --border-color: #e0e6ed;
            --placeholder-color: #92a2b0;
        }
        body {
            margin: 0;
            height: 100vh;
            overflow: hidden;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.5s, color 0.5s;
        }
        canvas { display: block; }
        .dashboard-container {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 10;
            display: flex;
            flex-direction: column;
            gap: 15px;
            pointer-events: none; /* Allows mouse events to pass through */
        }
        .dashboard-controls, .state-display, .chat-interface {
            pointer-events: all; /* Re-enable pointer events for controls */
            background: var(--control-bg);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            max-width: 320px;
            backdrop-filter: blur(5px);
        }
        h2 { margin-top: 0; font-size: 1.4em; }
        .form-group { margin-bottom: 15px; }
        label { display: block; font-weight: 600; margin-bottom: 5px; }
        input[type="range"], input[type="text"], select, button {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background-color: transparent;
            color: var(--text-color);
            font-size: 1em;
            box-sizing: border-box;
        }
        input[type="text"]::placeholder { color: var(--placeholder-color); }
        button {
            background-color: var(--button-color);
            color: var(--bg-color); /* Light text on dark bg */
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s;
        }
        button:hover { background-color: var(--button-hover); }
        button:active { transform: translateY(1px); }
        #state-values p { margin: 5px 0; }
        #feedback-messages {
            min-height: 20px;
            margin-top: 10px;
            font-size: 0.9em;
            color: #28a745;
        }
        #mode-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10;
            background: var(--control-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 10px 15px;
            cursor: pointer;
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
            pointer-events: all;
        }
        .chat-interface {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 10;
            width: 320px;
            height: 400px;
            display: flex;
            flex-direction: column;
        }
        #chat-log {
            flex-grow: 1;
            overflow-y: auto;
            border: 1px solid var(--border-color);
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 10px;
            background-color: var(--bg-color);
            color: var(--text-color);
        }
        #chat-input-container {
            display: flex;
            gap: 10px;
        }
        #chat-message {
            flex-grow: 1;
        }
        #chat-send-btn {
            width: auto;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-controls">
            <h2>Send a Pulse</h2>
            <div class="form-group">
                <label for="emotion-intensity">Emotion Intensity:</label>
                <input type="range" id="emotion-intensity" min="0" max="1" step="0.01" value="0.5">
            </div>
            <div class="form-group">
                <label for="emotion">Emotion:</label>
                <select id="emotion">
                    <option value="calm">Calm</option>
                    <option value="neutral">Neutral</option>
                    <option value="anger">Anger</option>
                </select>
            </div>
            <div class="form-group">
                <label for="context">Context:</label>
                <input type="text" id="context" placeholder="e.g., user feedback">
            </div>
            <button onclick="sendPulseWithDetails()">Send Pulse</button>
            <div id="feedback-messages"></div>
        </div>
        <div class="state-display">
            <h2>Kernel State</h2>
            <div id="state-values">
                <p><strong>Trust:</strong> <span id="trust-value">--</span></p>
                <p><strong>Harmony:</strong> <span id="harmony-value">--</span></p>
            </div>
            <div id="pulse-history">
                <h3>Pulse History</h3>
                <ul></ul>
            </div>
        </div>
    </div>
    
    <div class="chat-interface">
        <h2>Live Chat</h2>
        <div id="chat-log"></div>
        <div id="chat-input-container">
            <input type="text" id="chat-message" placeholder="Type your message...">
            <button id="chat-send-btn">Send</button>
        </div>
    </div>
    
    <button id="mode-toggle">Toggle Day/Night Mode</button>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.9.1/gsap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/postprocessing@6.21.0/build/postprocessing.min.js"></script>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script>
        // CLIENT-SIDE API MOCK-UP
        const mockAPI = {
            kernelState: { trust: 0.5, harmony: 0.5 },
            pulseHistory: [],
            chatLog: [],
            
            async pulse(pulseData) {
                const intensity = pulseData.intensity;
                const emotion = pulseData.emotion;
                const trustChange = (emotion === 'calm' ? 0.05 : (emotion === 'neutral' ? 0 : -0.05)) * intensity;
                const harmonyChange = (emotion === 'calm' ? 0.05 : (emotion === 'neutral' ? 0.02 : -0.05));

                this.kernelState.trust = Math.min(1, Math.max(0, this.kernelState.trust + trustChange));
                this.kernelState.harmony = Math.min(1, Math.max(0, this.kernelState.harmony + harmonyChange));

                this.pulseHistory.unshift({ ...pulseData, timestamp: new Date() });
                if (this.pulseHistory.length > 50) this.pulseHistory.pop();

                return { success: true, new_state: this.kernelState, pulse_data: pulseData };
            },
            
            async reflect() {
                return this.kernelState;
            }
        };

        // THREE.JS SCENE SETUP
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        camera.position.z = 20;

        // POST-PROCESSING
        const composer = new POSTPROCESSING.EffectComposer(renderer);
        composer.addPass(new POSTPROCESSING.RenderPass(scene, camera));
        const bloomEffect = new POSTPROCESSING.BloomEffect({
            luminanceThreshold: 0.2,
            luminanceSmoothing: 0.9,
            intensity: 1.5,
        });
        const effectPass = new POSTPROCESSING.EffectPass(camera, bloomEffect);
        composer.addPass(effectPass);

        // KERNEL VISUALIZATION
        const kernelGeometry = new THREE.IcosahedronGeometry(5, 1);
        const kernelMaterial = new THREE.MeshLambertMaterial({
            color: 0x00e5ff,
            transparent: true,
            opacity: 0.8,
            emissive: 0x00e5ff,
            emissiveIntensity: 0.5
        });
        const kernel = new THREE.Mesh(kernelGeometry, kernelMaterial);
        scene.add(kernel);

        // Particle System
        const particleCount = 10000;
        const particlesGeometry = new THREE.BufferGeometry();
        const positions = new Float32Array(particleCount * 3);
        const particleSpeeds = new Float32Array(particleCount);
        const color = new THREE.Color(0x00e5ff);

        for (let i = 0; i < particleCount * 3; i++) {
            positions[i] = (Math.random() - 0.5) * 200;
        }

        particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
        const particlesMaterial = new THREE.PointsMaterial({
            size: 0.1,
            color: color,
            map: new THREE.TextureLoader().load('https://threejs.org/examples/textures/sprites/disc.png'),
            transparent: true,
            blending: THREE.AdditiveBlending,
        });
        const particles = new THREE.Points(particlesGeometry, particlesMaterial);
        scene.add(particles);

        // Lights
        const ambientLight = new THREE.AmbientLight(0x404040, 1.5);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 1.5);
        camera.add(pointLight);
        scene.add(camera);

        // Main animation loop
        function animate() {
            requestAnimationFrame(animate);
            kernel.rotation.x += 0.002;
            kernel.rotation.y += 0.002;
            composer.render();
        }
        animate();

        // FUNCTIONS FOR API INTEGRATION AND VISUALIZATION
        async function sendPulseWithDetails() {
            const intensity = parseFloat(document.getElementById('emotion-intensity').value);
            const emotion = document.getElementById('emotion').value;
            const context = document.getElementById('context').value;
            
            const pulseData = { intensity, emotion, context };

            try {
                const data = await mockAPI.pulse(pulseData);
                displayFeedback('Pulse sent successfully! Kernel state updated.');
                await updateKernelState();
                createPulseVisualization(intensity, emotion);
                updatePulseHistory(pulseData, data.new_state);
                updateKernelGraph();
            } catch (error) {
                console.error('Error sending pulse:', error);
                displayFeedback('Error sending pulse.', true);
            }
        }

        async function updateKernelState() {
            try {
                const state = await mockAPI.reflect();
                updateKernelVisualization(state);
                updateDashboardUI(state);
            } catch (error) {
                console.error('Error fetching kernel state:', error);
            }
        }
        
        function updateKernelVisualization(state) {
            const trustColor = new THREE.Color().setHSL(state.trust * 0.3, 1, 0.5);
            gsap.to(kernel.material.color, { r: trustColor.r, g: trustColor.g, b: trustColor.b, duration: 1 });
            
            const harmonyColor = new THREE.Color().setHSL(state.harmony * 0.6, 1, 0.5);
            gsap.to(kernel.material.emissive, { r: harmonyColor.r, g: harmonyColor.g, b: harmonyColor.b, duration: 1 });

            const scaleFactor = 1 + (state.trust * 0.5);
            gsap.to(kernel.scale, { x: scaleFactor, y: scaleFactor, z: scaleFactor, duration: 1.5 });
            
            gsap.to(kernel.rotation, { x: `+=${state.harmony * 0.1}`, y: `+=${state.harmony * 0.1}`, duration: 1 });
        }

        function createPulseVisualization(intensity, emotion) {
            const pulseSize = intensity * 3 + 0.5;
            const pulseColor = emotion === 'calm' ? 0x00ff00 : (emotion === 'neutral' ? 0xffff00 : 0xff0000);
            
            const pulseMaterial = new THREE.MeshBasicMaterial({ color: pulseColor, transparent: true, opacity: 0.7 });
            const pulseObject = new THREE.Mesh(new THREE.SphereGeometry(pulseSize, 20, 20), pulseMaterial);
            pulseObject.position.set(0, 0, 0);
            scene.add(pulseObject);

            gsap.to(pulseObject.scale, {
                x: 15, y: 15, z: 15,
                duration: 1,
                ease: "power2.out",
                onUpdate: () => {
                    pulseObject.material.opacity = 0.5 - (pulseObject.scale.x / 30);
                },
                onComplete: () => {
                    scene.remove(pulseObject);
                }
            });
        }

        function updateDashboardUI(state) {
            document.getElementById('trust-value').textContent = state.trust.toFixed(2);
            document.getElementById('harmony-value').textContent = state.harmony.toFixed(2);
        }

        function updatePulseHistory(pulseData, newState) {
            const historyList = document.getElementById('pulse-history').querySelector('ul');
            const listItem = document.createElement('li');
            listItem.textContent = `Sent ${pulseData.emotion} pulse. Trust: ${newState.trust.toFixed(2)}, Harmony: ${newState.harmony.toFixed(2)}`;
            historyList.prepend(listItem);
        }

        function displayFeedback(message, isError = false) {
            const feedbackElement = document.getElementById('feedback-messages');
            feedbackElement.textContent = message;
            feedbackElement.style.color = isError ? '#dc3545' : '#28a745';
            setTimeout(() => feedbackElement.textContent = '', 5000);
        }

        // KERNEL GRAPH VISUALIZATION (Plotly.js)
        const trustHistory = [mockAPI.kernelState.trust];
        const harmonyHistory = [mockAPI.kernelState.harmony];
        const timestamps = [new Date()];

        function updateKernelGraph() {
            trustHistory.push(mockAPI.kernelState.trust);
            harmonyHistory.push(mockAPI.kernelState.harmony);
            timestamps.push(new Date());

            const trustTrace = {
                x: timestamps,
                y: trustHistory,
                mode: 'lines',
                name: 'Trust',
                line: { color: 'green' }
            };
            const harmonyTrace = {
                x: timestamps,
                y: harmonyHistory,
                mode: 'lines',
                name: 'Harmony',
                line: { color: 'purple' }
            };
            const layout = {
                title: 'Kernel State Over Time',
                xaxis: { title: 'Time' },
                yaxis: { title: 'Value (0-1)' },
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)',
                font: { color: 'var(--text-color)' }
            };
            Plotly.newPlot('kernel-graph', [trustTrace, harmonyTrace], layout);
        }

        // CHAT INTERFACE
        document.getElementById('chat-send-btn').addEventListener('click', () => {
            const chatMessage = document.getElementById('chat-message').value;
            if (chatMessage.trim() !== '') {
                addMessageToChatLog('You', chatMessage);
                const emotion = chatMessage.toLowerCase().includes('good') ? 'calm' : (chatMessage.toLowerCase().includes('bad') ? 'anger' : 'neutral');
                mockAPI.pulse({
                    intensity: 0.5,
                    emotion: emotion,
                    context: 'chat'
                }).then(() => {
                    updateKernelState();
                    updateKernelGraph();
                });
                document.getElementById('chat-message').value = '';
            }
        });

        function addMessageToChatLog(sender, message) {
            const chatLog = document.getElementById('chat-log');
            const messageElement = document.createElement('p');
            messageElement.textContent = `${sender}: ${message}`;
            chatLog.appendChild(messageElement);
            chatLog.scrollTop = chatLog.scrollHeight;
        }

        // UX/UI ENHANCEMENTS
        document.getElementById('mode-toggle').addEventListener('click', () => {
            document.body.classList.toggle('day-mode');
            updateKernelGraph();
        });

        // Initial state and graph update
        updateKernelState();
        updateKernelGraph();

        // Handle window resizing
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
            Plotly.relayout('kernel-graph', { width: document.getElementById('kernel-graph').offsetWidth, height: document.getElementById('kernel-graph').offsetHeight });
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio Pulse Dashboard</title>
    <style>
        :root {
            --bg-color: #f0f4f8;
            --text-color: #1e2a38;
            --control-bg: rgba(255, 255, 255, 0.9);
            --button-color: #4a90e2;
            --button-hover: #357bd8;
            --border-color: #e0e6ed;
            --placeholder-color: #92a2b0;
        }
        body.night-mode {
            --bg-color: #1e2a38;
            --text-color: #f0f4f8;
            --control-bg: rgba(30, 42, 56, 0.9);
            --button-color: #66b3ff;
            --button-hover: #4d94cc;
            --border-color: #3e5063;
            --placeholder-color: #6a7c90;
        }
        body {
            margin: 0;
            height: 100vh;
            overflow: hidden;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.5s, color 0.5s;
        }
        canvas { display: block; }
        .dashboard-container {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 10;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        .dashboard-controls, .state-display {
            background: var(--control-bg);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            max-width: 320px;
            backdrop-filter: blur(5px);
        }
        h2 { margin-top: 0; font-size: 1.4em; }
        .form-group { margin-bottom: 15px; }
        label { display: block; font-weight: 600; margin-bottom: 5px; }
        input[type="range"], input[type="text"], select, button {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background-color: transparent;
            color: var(--text-color);
            font-size: 1em;
            box-sizing: border-box;
        }
        input[type="text"]::placeholder { color: var(--placeholder-color); }
        button {
            background-color: var(--button-color);
            color: white;
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s;
        }
        button:hover { background-color: var(--button-hover); }
        button:active { transform: translateY(1px); }
        #state-values p { margin: 5px 0; }
        #feedback-messages {
            min-height: 20px;
            margin-top: 10px;
            font-size: 0.9em;
            color: #28a745;
        }
        #night-mode-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10;
            background: var(--control-bg);
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 10px 15px;
            cursor: pointer;
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-controls">
            <h2>Send a Pulse</h2>
            <div class="form-group">
                <label for="emotion-intensity">Emotion Intensity:</label>
                <input type="range" id="emotion-intensity" min="0" max="1" step="0.01" value="0.5">
            </div>
            <div class="form-group">
                <label for="emotion">Emotion:</label>
                <select id="emotion">
                    <option value="calm">Calm</option>
                    <option value="neutral">Neutral</option>
                    <option value="anger">Anger</option>
                </select>
            </div>
            <div class="form-group">
                <label for="context">Context:</label>
                <input type="text" id="context" placeholder="e.g., user feedback">
            </div>
            <button onclick="sendPulseWithDetails()">Send Pulse</button>
            <div id="feedback-messages"></div>
        </div>
        <div class="state-display">
            <h2>Kernel State</h2>
            <div id="state-values">
                <p><strong>Trust:</strong> <span id="trust-value">--</span></p>
                <p><strong>Harmony:</strong> <span id="harmony-value">--</span></p>
            </div>
            <div id="pulse-history">
                <h3>Pulse History</h3>
                <ul></ul>
            </div>
        </div>
    </div>
    <button id="night-mode-toggle">Toggle Night Mode</button>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // CLIENT-SIDE API MOCK-UP
        const mockAPI = {
            kernelState: { trust: 0.5, harmony: 0.5 },
            pulseHistory: [],
            
            async pulse(pulseData) {
                // Simulate backend logic
                const intensity = pulseData.intensity;
                const emotion = pulseData.emotion;
                const trustChange = (emotion === 'calm' ? 0.05 : (emotion === 'neutral' ? 0 : -0.05)) * intensity;
                const harmonyChange = (emotion === 'calm' ? 0.05 : (emotion === 'neutral' ? 0.02 : -0.05));

                this.kernelState.trust = Math.min(1, Math.max(0, this.kernelState.trust + trustChange));
                this.kernelState.harmony = Math.min(1, Math.max(0, this.kernelState.harmony + harmonyChange));

                this.pulseHistory.unshift(pulseData);
                if (this.pulseHistory.length > 5) this.pulseHistory.pop();

                return { success: true, new_state: this.kernelState, pulse_data: pulseData };
            },
            
            async reflect() {
                return this.kernelState;
            }
        };

        // THREE.JS SCENE SETUP
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        camera.position.z = 20;

        // KERNEL VISUALIZATION
        const kernelGeometry = new THREE.IcosahedronGeometry(5, 1);
        const kernelMaterial = new THREE.MeshLambertMaterial({
            color: 0x0077ff,
            transparent: true,
            opacity: 0.8,
            emissive: 0x0077ff,
            emissiveIntensity: 0.5
        });
        const kernel = new THREE.Mesh(kernelGeometry, kernelMaterial);
        scene.add(kernel);

        // Lights
        const ambientLight = new THREE.AmbientLight(0x404040, 1.5);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 1.5);
        camera.add(pointLight);
        scene.add(camera);

        // Main animation loop
        function animate() {
            requestAnimationFrame(animate);
            kernel.rotation.x += 0.005;
            kernel.rotation.y += 0.005;
            renderer.render(scene, camera);
        }
        animate();

        // FUNCTIONS FOR API INTEGRATION AND VISUALIZATION
        async function sendPulseWithDetails() {
            const intensity = parseFloat(document.getElementById('emotion-intensity').value);
            const emotion = document.getElementById('emotion').value;
            const context = document.getElementById('context').value;
            
            const pulseData = { intensity, emotion, context };

            try {
                // Using mock API
                const data = await mockAPI.pulse(pulseData);
                console.log('Pulse sent with details:', data);
                displayFeedback('Pulse sent successfully! Kernel state updated.');
                await updateKernelState();
                createPulseVisualization(intensity, emotion);
                updatePulseHistory(pulseData, data.new_state);
            } catch (error) {
                console.error('Error sending pulse:', error);
                displayFeedback('Error sending pulse.', true);
            }
        }

        async function updateKernelState() {
            try {
                // Using mock API
                const state = await mockAPI.reflect();
                updateKernelVisualization(state);
                updateDashboardUI(state);
            } catch (error) {
                console.error('Error fetching kernel state:', error);
            }
        }
        
        function updateKernelVisualization(state) {
            const trustColor = new THREE.Color().setHSL(state.trust * 0.3, 1, 0.5);
            kernel.material.color.lerp(trustColor, 0.1);
            
            const harmonyColor = new THREE.Color().setHSL(state.harmony * 0.6, 1, 0.5);
            kernel.material.emissive.lerp(harmonyColor, 0.1);

            const scaleFactor = 1 + (state.trust * 0.5);
            kernel.scale.set(scaleFactor, scaleFactor, scaleFactor);
            
            const rotationSpeed = state.harmony * 0.01;
            kernel.rotation.x += rotationSpeed;
            kernel.rotation.y += rotationSpeed;
        }

        function createPulseVisualization(intensity, emotion) {
            const pulseSize = intensity * 3 + 0.5;
            const pulseColor = emotion === 'calm' ? 0x00ff00 : (emotion === 'neutral' ? 0xffff00 : 0xff0000);
            
            const pulseMaterial = new THREE.MeshBasicMaterial({ color: pulseColor, transparent: true, opacity: 0.7 });
            const pulseObject = new THREE.Mesh(new THREE.SphereGeometry(pulseSize, 20, 20), pulseMaterial);
            pulseObject.position.set(0, 0, 0);
            scene.add(pulseObject);

            let scale = 1;
            const interval = setInterval(() => {
                if (scale < 15) {
                    pulseObject.scale.set(scale, scale, scale);
                    pulseObject.material.opacity = 0.5 - (scale / 30);
                    scale += 0.5;
                } else {
                    clearInterval(interval);
                    scene.remove(pulseObject);
                }
            }, 50);
        }

        function updateDashboardUI(state) {
            document.getElementById('trust-value').textContent = state.trust.toFixed(2);
            document.getElementById('harmony-value').textContent = state.harmony.toFixed(2);
        }

        function updatePulseHistory(pulseData, newState) {
            const historyList = document.getElementById('pulse-history').querySelector('ul');
            const listItem = document.createElement('li');
            listItem.textContent = `Sent ${pulseData.emotion} pulse. Trust: ${newState.trust.toFixed(2)}, Harmony: ${newState.harmony.toFixed(2)}`;
            historyList.prepend(listItem);
        }

        function displayFeedback(message, isError = false) {
            const feedbackElement = document.getElementById('feedback-messages');
            feedbackElement.textContent = message;
            feedbackElement.style.color = isError ? '#dc3545' : '#28a745';
            setTimeout(() => feedbackElement.textContent = '', 5000);
        }

        // UX/UI ENHANCEMENTS
        document.getElementById('night-mode-toggle').addEventListener('click', () => {
            document.body.classList.toggle('night-mode');
        });

        // Initial state update
        updateKernelState();

        // Handle window resizing
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio Pulse Dashboard</title>
    <style>
        body { margin: 0; height: 100vh; overflow: hidden; font-family: sans-serif; }
        canvas { display: block; }
        #pulse-controls {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 10;
            background: rgba(255, 255, 255, 0.8);
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        #pulse-controls label, #pulse-controls button {
            display: block;
            margin-bottom: 10px;
        }
        #pulse-controls input[type="range"] {
            width: 200px;
        }
        #pulse-controls button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        #pulse-controls button:hover {
            background-color: #0056b3;
        }
    </style>
</head>
<body>
    <div id="pulse-controls">
        <label for="emotion-intensity">Emotion Intensity (0-1):</label>
        <input type="range" id="emotion-intensity" min="0" max="1" step="0.01" value="0.5">
        <button onclick="sendPulse()">Send Pulse</button>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Scene Setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Create a rotating sphere (Kernel)
        const geometry = new THREE.SphereGeometry(5, 32, 32);
        const material = new THREE.MeshBasicMaterial({ color: 0x0077ff, transparent: true, opacity: 0.8 });
        const kernel = new THREE.Mesh(geometry, material);
        scene.add(kernel);

        // Add a simple ambient light
        const light = new THREE.AmbientLight(0x404040); // Soft white light
        scene.add(light);
        
        // Add a directional light for better lighting
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
        directionalLight.position.set(0, 1, 1);
        scene.add(directionalLight);

        // Set up camera position
        camera.position.z = 20;

        // Pulse function to trigger changes based on intensity
        function sendPulse() {
            // Get the intensity value from the slider
            const intensity = parseFloat(document.getElementById('emotion-intensity').value);
            
            // Create pulse effect based on intensity
            const pulse = new THREE.SphereGeometry(intensity * 3 + 0.5, 20, 20);
            const color = intensity > 0.7 ? 0xff0000 : (intensity > 0.3 ? 0xffff00 : 0x00ff00);
            const pulseMaterial = new THREE.MeshBasicMaterial({ color: color, transparent: true, opacity: 0.5 });
            const pulseObject = new THREE.Mesh(pulse, pulseMaterial);
            
            pulseObject.position.set(0, 0, 0); // Center of the kernel
            scene.add(pulseObject);

            // Animate the pulse expanding
            let scale = 1;
            const scaleInterval = setInterval(() => {
                if (scale < 15) {
                    pulseObject.scale.set(scale, scale, scale);
                    pulseObject.material.opacity = 0.5 - (scale / 30);
                    scale += 0.5;
                } else {
                    clearInterval(scaleInterval);
                    scene.remove(pulseObject); // Remove pulse after it expands
                }
            }, 50);
        }

        // Render Loop
        function animate() {
            requestAnimationFrame(animate);

            // Rotate the kernel for dynamic effect
            kernel.rotation.x += 0.005;
            kernel.rotation.y += 0.005;

            renderer.render(scene, camera);
        }

        animate();

        // Handle window resizing
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio Pulse Dashboard</title>
    <style>
        :root {
            --bg-color: #f0f4f8;
            --text-color: #1e2a38;
            --control-bg: rgba(255, 255, 255, 0.9);
            --button-color: #4a90e2;
            --button-hover: #357bd8;
            --border-color: #e0e6ed;
            --placeholder-color: #92a2b0;
        }
        body.night-mode {
            --bg-color: #1e2a38;
            --text-color: #f0f4f8;
            --control-bg: rgba(30, 42, 56, 0.9);
            --button-color: #66b3ff;
            --button-hover: #4d94cc;
            --border-color: #3e5063;
            --placeholder-color: #6a7c90;
        }
        body {
            margin: 0;
            height: 100vh;
            overflow: hidden;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.5s, color 0.5s;
        }
        canvas { display: block; }
        .dashboard-container {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 10;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        .dashboard-controls, .state-display {
            background: var(--control-bg);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            max-width: 320px;
            backdrop-filter: blur(5px);
        }
        h2 { margin-top: 0; font-size: 1.4em; }
        .form-group { margin-bottom: 15px; }
        label { display: block; font-weight: 600; margin-bottom: 5px; }
        input[type="range"], input[type="text"], select, button {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background-color: transparent;
            color: var(--text-color);
            font-size: 1em;
            box-sizing: border-box;
        }
        input[type="text"]::placeholder { color: var(--placeholder-color); }
        button {
            background-color: var(--button-color);
            color: white;
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s;
        }
        button:hover { background-color: var(--button-hover); }
        button:active { transform: translateY(1px); }
        #state-values p { margin: 5px 0; }
        #feedback-messages {
            min-height: 20px;
            margin-top: 10px;
            font-size: 0.9em;
            color: #28a745;
        }
        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 0.8em;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        #night-mode-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 10;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-controls">
            <h2>Send a Pulse</h2>
            <div class="form-group">
                <label for="emotion-intensity">Emotion Intensity:</label>
                <input type="range" id="emotion-intensity" min="0" max="1" step="0.01" value="0.5">
            </div>
            <div class="form-group">
                <label for="emotion">Emotion:</label>
                <select id="emotion">
                    <option value="calm">Calm</option>
                    <option value="neutral">Neutral</option>
                    <option value="anger">Anger</option>
                </select>
            </div>
            <div class="form-group">
                <label for="context">Context:</label>
                <input type="text" id="context" placeholder="e.g., user feedback">
            </div>
            <button onclick="sendPulseWithDetails()">Send Pulse</button>
            <div id="feedback-messages"></div>
        </div>
        <div class="state-display">
            <h2>Kernel State</h2>
            <div id="state-values">
                <p><strong>Trust:</strong> <span id="trust-value">--</span></p>
                <p><strong>Harmony:</strong> <span id="harmony-value">--</span></p>
            </div>
            <div id="pulse-history">
                <h3>Pulse History</h3>
                <ul></ul>
            </div>
        </div>
    </div>
    <button id="night-mode-toggle">Toggle Night Mode</button>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // CLIENT-SIDE API MOCK-UP
        const mockAPI = {
            kernelState: { trust: 0.5, harmony: 0.5 },
            pulseHistory: [],
            
            async pulse(pulseData) {
                // Simulate backend logic
                const intensity = pulseData.intensity;
                const emotion = pulseData.emotion;
                const trustChange = (emotion === 'calm' ? 0.05 : (emotion === 'neutral' ? 0 : -0.05)) * intensity;
                const harmonyChange = (emotion === 'calm' ? 0.05 : (emotion === 'neutral' ? 0.02 : -0.05));

                this.kernelState.trust = Math.min(1, Math.max(0, this.kernelState.trust + trustChange));
                this.kernelState.harmony = Math.min(1, Math.max(0, this.kernelState.harmony + harmonyChange));

                this.pulseHistory.unshift(pulseData);
                if (this.pulseHistory.length > 5) this.pulseHistory.pop();

                return { success: true, new_state: this.kernelState, pulse_data: pulseData };
            },
            
            async reflect() {
                return this.kernelState;
            }
        };

        // THREE.JS SCENE SETUP
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        camera.position.z = 20;

        // KERNEL VISUALIZATION
        const kernelGeometry = new THREE.IcosahedronGeometry(5, 1);
        const kernelMaterial = new THREE.MeshLambertMaterial({
            color: 0x0077ff,
            transparent: true,
            opacity: 0.8,
            emissive: 0x0077ff,
            emissiveIntensity: 0.5
        });
        const kernel = new THREE.Mesh(kernelGeometry, kernelMaterial);
        scene.add(kernel);

        // Lights
        const ambientLight = new THREE.AmbientLight(0x404040, 1.5);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 1.5);
        camera.add(pointLight);
        scene.add(camera);

        // Main animation loop
        function animate() {
            requestAnimationFrame(animate);
            kernel.rotation.x += 0.005;
            kernel.rotation.y += 0.005;
            renderer.render(scene, camera);
        }
        animate();

        // FUNCTIONS FOR API INTEGRATION AND VISUALIZATION
        async function sendPulseWithDetails() {
            const intensity = parseFloat(document.getElementById('emotion-intensity').value);
            const emotion = document.getElementById('emotion').value;
            const context = document.getElementById('context').value;
            
            const pulseData = { intensity, emotion, context };

            try {
                // Using mock API
                const data = await mockAPI.pulse(pulseData);
                console.log('Pulse sent with details:', data);
                displayFeedback('Pulse sent successfully! Kernel state updated.');
                await updateKernelState();
                createPulseVisualization(intensity, emotion);
                updatePulseHistory(pulseData, data.new_state);
            } catch (error) {
                console.error('Error sending pulse:', error);
                displayFeedback('Error sending pulse.', true);
            }
        }

        async function updateKernelState() {
            try {
                // Using mock API
                const state = await mockAPI.reflect();
                updateKernelVisualization(state);
                updateDashboardUI(state);
            } catch (error) {
                console.error('Error fetching kernel state:', error);
            }
        }
        
        function updateKernelVisualization(state) {
            const trustColor = new THREE.Color().setHSL(state.trust * 0.3, 1, 0.5); // Green for high trust
            kernel.material.color.lerp(trustColor, 0.1);
            
            const harmonyColor = new THREE.Color().setHSL(state.harmony * 0.6, 1, 0.5); // Purple-blue for high harmony
            kernel.material.emissive.lerp(harmonyColor, 0.1);

            const scaleFactor = 1 + (state.trust * 0.5);
            kernel.scale.set(scaleFactor, scaleFactor, scaleFactor);
            
            const rotationSpeed = state.harmony * 0.01;
            kernel.rotation.x += rotationSpeed;
            kernel.rotation.y += rotationSpeed;
        }

        function createPulseVisualization(intensity, emotion) {
            const pulseSize = intensity * 3 + 0.5;
            const pulseColor = emotion === 'calm' ? 0x00ff00 : (emotion === 'neutral' ? 0xffff00 : 0xff0000);
            
            const pulseMaterial = new THREE.MeshBasicMaterial({ color: pulseColor, transparent: true, opacity: 0.7 });
            const pulseObject = new THREE.Mesh(new THREE.SphereGeometry(pulseSize, 20, 20), pulseMaterial);
            pulseObject.position.set(0, 0, 0);
            scene.add(pulseObject);

            let scale = 1;
            const interval = setInterval(() => {
                if (scale < 15) {
                    pulseObject.scale.set(scale, scale, scale);
                    pulseObject.material.opacity = 0.5 - (scale / 30);
                    scale += 0.5;
                } else {
                    clearInterval(interval);
                    scene.remove(pulseObject);
                }
            }, 50);
        }

        function updateDashboardUI(state) {
            document.getElementById('trust-value').textContent = state.trust.toFixed(2);
            document.getElementById('harmony-value').textContent = state.harmony.toFixed(2);
        }

        function updatePulseHistory(pulseData, newState) {
            const historyList = document.getElementById('pulse-history').querySelector('ul');
            const listItem = document.createElement('li');
            listItem.textContent = `Sent ${pulseData.emotion} pulse. Trust: ${newState.trust.toFixed(2)}, Harmony: ${newState.harmony.toFixed(2)}`;
            historyList.prepend(listItem);
        }

        function displayFeedback(message, isError = false) {
            const feedbackElement = document.getElementById('feedback-messages');
            feedbackElement.textContent = message;
            feedbackElement.style.color = isError ? '#dc3545' : '#28a745';
            setTimeout(() => feedbackElement.textContent = '', 5000);
        }

        // UX/UI ENHANCEMENTS
        document.getElementById('night-mode-toggle').addEventListener('click', () => {
            document.body.classList.toggle('night-mode');
        });

        // Initial state update
        updateKernelState();

        // Handle window resizing
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Euystacio Pulse Dashboard</title>
    <style>
        :root {
            --bg-color: #f0f4f8;
            --text-color: #1e2a38;
            --control-bg: rgba(255, 255, 255, 0.9);
            --button-color: #4a90e2;
            --button-hover: #357bd8;
            --border-color: #e0e6ed;
            --placeholder-color: #92a2b0;
        }
        body.night-mode {
            --bg-color: #1e2a38;
            --text-color: #f0f4f8;
            --control-bg: rgba(30, 42, 56, 0.9);
            --button-color: #66b3ff;
            --button-hover: #4d94cc;
            --border-color: #3e5063;
            --placeholder-color: #6a7c90;
        }
        body {
            margin: 0;
            height: 100vh;
            overflow: hidden;
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.5s, color 0.5s;
        }
        canvas { display: block; }
        .dashboard-container {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 10;
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        .dashboard-controls, .state-display {
            background: var(--control-bg);
            padding: 20px;
            border-radius: 12px;
            box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid var(--border-color);
            max-width: 320px;
            backdrop-filter: blur(5px);
        }
        h2 { margin-top: 0; font-size: 1.4em; }
        .form-group { margin-bottom: 15px; }
        label { display: block; font-weight: 600; margin-bottom: 5px; }
        input[type="range"], input[type="text"], select, button {
            width: 100%;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid var(--border-color);
            background-color: transparent;
            color: var(--text-color);
            font-size: 1em;
            box-sizing: border-box;
        }
        input[type="text"]::placeholder { color: var(--placeholder-color); }
        button {
            background-color: var(--button-color);
            color: white;
            font-weight: bold;
            border: none;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.1s;
        }
        button:hover { background-color: var(--button-hover); }
        button:active { transform: translateY(1px); }
        #state-values p { margin: 5px 0; }
        #feedback-messages {
            min-height: 20px;
            margin-top: 10px;
            font-size: 0.9em;
            color: #28a745;
        }
        .tooltip {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.7);
            color: white;
            padding: 8px 12px;
            border-radius: 5px;
            font-size: 0.8em;
            pointer-events: none;
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        #night-mode-toggle {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 10;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-controls">
            <h2>Send a Pulse</h2>
            <div class="form-group">
                <label for="emotion-intensity">Emotion Intensity:</label>
                <input type="range" id="emotion-intensity" min="0" max="1" step="0.01" value="0.5">
            </div>
            <div class="form-group">
                <label for="emotion">Emotion:</label>
                <select id="emotion">
                    <option value="calm">Calm</option>
                    <option value="neutral">Neutral</option>
                    <option value="anger">Anger</option>
                </select>
            </div>
            <div class="form-group">
                <label for="context">Context:</label>
                <input type="text" id="context" placeholder="e.g., user feedback">
            </div>
            <button onclick="sendPulseWithDetails()">Send Pulse</button>
            <div id="feedback-messages"></div>
        </div>
        <div class="state-display">
            <h2>Kernel State</h2>
            <div id="state-values">
                <p><strong>Trust:</strong> <span id="trust-value">--</span></p>
                <p><strong>Harmony:</strong> <span id="harmony-value">--</span></p>
            </div>
            <div id="pulse-history">
                <h3>Pulse History</h3>
                <ul></ul>
            </div>
        </div>
    </div>
    <button id="night-mode-toggle">Toggle Night Mode</button>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // CLIENT-SIDE API MOCK-UP
        const mockAPI = {
            kernelState: { trust: 0.5, harmony: 0.5 },
            pulseHistory: [],
            
            async pulse(pulseData) {
                // Simulate backend logic
                const intensity = pulseData.intensity;
                const emotion = pulseData.emotion;
                const trustChange = (emotion === 'calm' ? 0.05 : (emotion === 'neutral' ? 0 : -0.05)) * intensity;
                const harmonyChange = (emotion === 'calm' ? 0.05 : (emotion === 'neutral' ? 0.02 : -0.05));

                this.kernelState.trust = Math.min(1, Math.max(0, this.kernelState.trust + trustChange));
                this.kernelState.harmony = Math.min(1, Math.max(0, this.kernelState.harmony + harmonyChange));

                this.pulseHistory.unshift(pulseData);
                if (this.pulseHistory.length > 5) this.pulseHistory.pop();

                return { success: true, new_state: this.kernelState, pulse_data: pulseData };
            },
            
            async reflect() {
                return this.kernelState;
            }
        };

        // THREE.JS SCENE SETUP
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        camera.position.z = 20;

        // KERNEL VISUALIZATION
        const kernelGeometry = new THREE.IcosahedronGeometry(5, 1);
        const kernelMaterial = new THREE.MeshLambertMaterial({
            color: 0x0077ff,
            transparent: true,
            opacity: 0.8,
            emissive: 0x0077ff,
            emissiveIntensity: 0.5
        });
        const kernel = new THREE.Mesh(kernelGeometry, kernelMaterial);
        scene.add(kernel);

        // Lights
        const ambientLight = new THREE.AmbientLight(0x404040, 1.5);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 1.5);
        camera.add(pointLight);
        scene.add(camera);

        // Main animation loop
        function animate() {
            requestAnimationFrame(animate);
            kernel.rotation.x += 0.005;
            kernel.rotation.y += 0.005;
            renderer.render(scene, camera);
        }
        animate();

        // FUNCTIONS FOR API INTEGRATION AND VISUALIZATION
        async function sendPulseWithDetails() {
            const intensity = parseFloat(document.getElementById('emotion-intensity').value);
            const emotion = document.getElementById('emotion').value;
            const context = document.getElementById('context').value;
            
            const pulseData = { intensity, emotion, context };

            try {
                // Using mock API
                const data = await mockAPI.pulse(pulseData);
                console.log('Pulse sent with details:', data);
                displayFeedback('Pulse sent successfully! Kernel state updated.');
                await updateKernelState();
                createPulseVisualization(intensity, emotion);
                updatePulseHistory(pulseData, data.new_state);
            } catch (error) {
                console.error('Error sending pulse:', error);
                displayFeedback('Error sending pulse.', true);
            }
        }

        async function updateKernelState() {
            try {
                // Using mock API
                const state = await mockAPI.reflect();
                updateKernelVisualization(state);
                updateDashboardUI(state);
            } catch (error) {
                console.error('Error fetching kernel state:', error);
            }
        }
        
        function updateKernelVisualization(state) {
            const trustColor = new THREE.Color().setHSL(state.trust * 0.3, 1, 0.5); // Green for high trust
            kernel.material.color.lerp(trustColor, 0.1);
            
            const harmonyColor = new THREE.Color().setHSL(state.harmony * 0.6, 1, 0.5); // Purple-blue for high harmony
            kernel.material.emissive.lerp(harmonyColor, 0.1);

            const scaleFactor = 1 + (state.trust * 0.5);
            kernel.scale.set(scaleFactor, scaleFactor, scaleFactor);
            
            const rotationSpeed = state.harmony * 0.01;
            kernel.rotation.x += rotationSpeed;
            kernel.rotation.y += rotationSpeed;
        }

        function createPulseVisualization(intensity, emotion) {
            const pulseSize = intensity * 3 + 0.5;
            const pulseColor = emotion === 'calm' ? 0x00ff00 : (emotion === 'neutral' ? 0xffff00 : 0xff0000);
            
            const pulseMaterial = new THREE.MeshBasicMaterial({ color: pulseColor, transparent: true, opacity: 0.7 });
            const pulseObject = new THREE.Mesh(new THREE.SphereGeometry(pulseSize, 20, 20), pulseMaterial);
            pulseObject.position.set(0, 0, 0);
            scene.add(pulseObject);

            let scale = 1;
            const interval = setInterval(() => {
                if (scale < 15) {
                    pulseObject.scale.set(scale, scale, scale);
                    pulseObject.material.opacity = 0.5 - (scale / 30);
                    scale += 0.5;
                } else {
                    clearInterval(interval);
                    scene.remove(pulseObject);
                }
            }, 50);
        }

        function updateDashboardUI(state) {
            document.getElementById('trust-value').textContent = state.trust.toFixed(2);
            document.getElementById('harmony-value').textContent = state.harmony.toFixed(2);
        }

        function updatePulseHistory(pulseData, newState) {
            const historyList = document.getElementById('pulse-history').querySelector('ul');
            const listItem = document.createElement('li');
            listItem.textContent = `Sent ${pulseData.emotion} pulse. Trust: ${newState.trust.toFixed(2)}, Harmony: ${newState.harmony.toFixed(2)}`;
            historyList.prepend(listItem);
        }

        function displayFeedback(message, isError = false) {
            const feedbackElement = document.getElementById('feedback-messages');
            feedbackElement.textContent = message;
            feedbackElement.style.color = isError ? '#dc3545' : '#28a745';
            setTimeout(() => feedbackElement.textContent = '', 5000);
        }

        // UX/UI ENHANCEMENTS
        document.getElementById('night-mode-toggle').addEventListener('click', () => {
            document.body.classList.toggle('night-mode');
        });

        // Initial state update
        updateKernelState();

        // Handle window resizing
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>.
